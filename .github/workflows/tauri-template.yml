name: Tauri CI

on:
  workflow_call:
    inputs:
      buildStage:
        required: true
        type: string
        description: "构建阶段"
      nodeVersion:
        required: false
        type: string
        default: "lts/*"
        description: "Node 版本"
      buildFeishuWebhook:
        required: false
        type: string
        description: "用于通知编译进程的 webhook 地址"
      releaseFeishuWebhook:
        required: false
        type: string
        description: "构建成功后用于通知发布的 webhook 地址"

    secrets:
      ossAccessKey:
        required: false
        description: "OSS Access Key"
      ossAccessKeySecret:
        required: false
        description: "OSS Secret Key"
      tauriPrivateKey:
        required: true
        description: "Tauri Private Key"
      tauriKeyPassword:
        required: true
        description: "Tauri Key Password"

jobs:
  build-tauri:
    outputs:
      project-info: ${{ steps.product-info.outputs.result }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            os: "macos"
            arch: "aarch64"
            # args: "--target aarch64-apple-darwin"
            args: ""
          - platform: "windows-latest"
            os: "windows"
            arch: "x86_64"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code (检出代码)
        uses: actions/checkout@v4

      - name: Get Product Info
        id: product-info
        uses: actions/github-script@v7
        with:
          result-encoding: json
          script: |
            const version = require('./package.json').version
            const productName = require('./src-tauri/tauri.conf.json').package.productName
            const linuxFileAppName  = productName
              .replace(/([a-z0-9])([A-Z])/g, '$1-$2')
              .replace(/([A-Z])([A-Z])(?=[a-z])/g, '$1-$2')
              .replace(/[ _.]/g, '-')
              .replace(/[()[\]{}]/g, '')
              .toLowerCase();

            console.log(`version: ${version ? version : '未找到'}`)
            console.log(`productName: ${productName ? productName : '未找到'}`)
            console.log(`productNameLower: ${productNameLower ? productNameLower : '未找到'}`)

            return {
              version,
              productName,
              linuxFileAppName
            }

      - name: Post Message (发送飞书 Webhook 消息)
        uses: foxundermoon/feishu-action@v2
        if: ${{ inputs.buildFeishuWebhook }}
        with:
          url: ${{ inputs.buildFeishuWebhook }}
          msg_type: post
          content: |
            post:
              zh_cn:
                title: ${{ fromJson(steps.product-info.outputs.result).productName }} 开始构建
                content:
                - - tag: text
                    un_escape: true
                    text: '版本: ${{ fromJson(steps.product-info.outputs.result).version }}'
                - - tag: text
                    un_escape: true
                    text: '环境: ${{ inputs.buildStage }}'
                - - tag: text
                    un_escape: true
                    text: '平台: ${{ matrix.os }}'
                - - tag: text
                    text: '部署链接: '
                  - tag: a
                    text: github action
                    href: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Rust (设置 Rust 版本)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup pnpm (安装 pnpm)
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup node (设置 node 版本)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}

      - name: Install frontend dependencies (安装前端依赖)
        run: pnpm install

      - name: Build tauri (构建 tauri)
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.tauriPrivateKey }}
          TAURI_KEY_PASSWORD: ${{ secrets.tauriKeyPassword }}
        with:
          args: ${{ matrix.args }}

      - name: Upload Artifact (上传构建产物)
        uses: actions/upload-artifact@v3
        if: success() && matrix.os == 'macos'
        with:
          if-no-files-found: error
          name: ${{ matrix.os }}-bundle
          path: ./src-tauri/target/release/bundle/macos

      - name: Upload Artifact (上传构建产物)
        uses: actions/upload-artifact@v3
        if: success() && matrix.os == 'windows'
        with:
          if-no-files-found: error
          name: ${{ matrix.os }}-bundle
          path: ./src-tauri/target/release/bundle/msi

      - name: Post Message (发送飞书 Webhook 消息)
        uses: foxundermoon/feishu-action@v2
        if: success() && ${{ inputs.releaseFeishuWebhook }}
        with:
          url: ${{ inputs.buildFeishuWebhook }}
          msg_type: post
          content: |
            post:
              zh_cn:
                title: ${{ fromJson(steps.product-info.outputs.result).productName }} 构建完成
                content:
                - - tag: text
                    un_escape: true
                    text: '版本: ${{ fromJson(steps.product-info.outputs.result).version }}'
                - - tag: text
                    un_escape: true
                    text: '环境: ${{ inputs.buildStage }}'
                - - tag: text
                    un_escape: true
                    text: '平台: ${{ matrix.os }}'

  publish-release:
    permissions:
      contents: write
    runs-on: [linux]
    needs: [build-tauri]
    steps:
      - name: Download Artifact (下载构建产物)
        uses: actions/download-artifact@v3
        with:
          path: ./releases
          name: |
            macos-bundle
            windows-bundle

      - name: Run script
        run: pnpm install && pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ fromJson(needs.build-tauri.outputs.project-info).version }}

      - name: upload files to OSS
        uses: fangbinwei/aliyun-oss-website-action@v1
        with:
          accessKeyId: ${{ secrets.ossAccessKey }}
          accessKeySecret: ${{ secrets.ossAccessKeySecret }}
          bucket: larryoss
          # use your own endpoint
          endpoint: oss-cn-hangzhou-internal.aliyuncs.com
          folder: ${{ fromJson(needs.build-tauri.outputs.project-info).linuxFileAppName }}

      - name: build install.json
        uses: actions/github-script@v7
        id: install-info
        env:
          VERSION: ${{ fromJson(needs.build-tauri.outputs.project-info).version }}
          PRODUCT_NAME: ${{ fromJson(needs.build-tauri.outputs.project-info).linuxFileAppName }}
        with:
          result-encoding: json
          script: |
            const fs = require('fs')
            const releases = fs.readdirSync('./releases')

            const productName = process.env.PRODUCT_NAME

            // windows
            const windowsApp = releases.find(release => release.endsWith('.msi.zip'))
            const windowsSig = releases.find(release => release.endsWith('.msi.zip.sig'))
            const windowsSigContent = fs.readFileSync(`./releases/${windowsSig}`, 'utf-8')

            // macos
            const macosApp = releases.find(release => release.includes('.app.zip'))
            const macosSig = releases.find(release => release.includes('.app.zip.sig'))
            const macosSigContent = fs.readFileSync(`./releases/${macosSig}`, 'utf-8')

            const updateData = {
              version: `v${process.env.VERSION}`,
              note: `v${process.env.VERSION}`,
              pub_date: new Date().toISOString(),
              platform: {
                "windows-x86_64": {
                  // url: `https://ipoasis-pic.s3.amazonaws.com/${windows}`,
                  url: `https://oss.larryoss.com/${productName}/${windowsApp}`,
                  signature: windowsSigContent
                },
                "darwin-aarch64": {
                  url: `https://oss.larryoss.com/${productName}/${macos}`,
                  signature: macosSigContent
                }
              }
            }

            fs.writeFileSync('./updater/install.json', JSON.stringify(updateData, null, 2))

            return updateData

      # - name: Upload to S3
      #   uses: keithweaver/aws-s3-github-action@v1.0.0
      #   with:
      #     command: cp
      #     source: ./releases/
      #     destination: s3://ipoasis-pic/proxy_tester/${{ needs.create-release.outputs.version }}/
      #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_MAIN }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_MAIN }}
      #     aws_region: us-east-1
      #     flags: --acl public-read --recursive

      - name: deploy install.json (部署 install.json)
        uses: peaceiris/actions-gh-pages@v3
        if: success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater
          force_orphan: true

      - name: Post Message (发送飞书 Webhook 消息)
        uses: foxundermoon/feishu-action@v2
        if: success() && ${{ inputs.releaseFeishuWebhook }}
        with:
          url: ${{ inputs.releaseFeishuWebhook }}
          msg_type: post
          content: |
            post:
              zh_cn:
                title: ${{ fromJson(needs.build-tauri.outputs.project-info).productName }} 发布完成
                content:
                - - tag: text
                    un_escape: true
                    text: '版本: v${{ fromJson(needs.build-tauri.outputs.project-info).version }}'
                - - tag: text
                    text: 'windows 下载链接'
                  - tag: a
                    text: '点击下载'
                    href: ${{ fromJson(steps.install-info.outputs.result).platform['windows-x86_64'].url }}
                - - tag: text
                    text: 'macos 下载链接'
                  - tag: a
                    text: '点击下载'
                    href: ${{ fromJson(steps.install-info.outputs.result).platform['darwin-aarch64'].url }}
